using System;
using System.Collections.Generic;

using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using OpenBookPgh;

public partial class Admin_Vendors : System.Web.UI.Page
{
	protected void Page_Load(object sender, EventArgs e)
	{
		if (!IsPostBack)
		{
			// Set Initial sort image state
			clearImages();
			GetSearchResults();
			
			// Load vendor drop down
			ddlVendors.DataSource = Admin.LoadVendors();
			ddlVendors.DataBind();
		}
	}
	protected void rptVendors_ItemCommand(object source, RepeaterCommandEventArgs e)
	{
		if (e.CommandName == "edit")
		{
			Response.Redirect("EditVendor.aspx?id=" + e.CommandArgument.ToString());
		}

	}
	protected void ddlVendors_SelectedIndexChanged(object sender, EventArgs e)
	{
		Response.Redirect("Vendors.aspx?id=" + ddlVendors.SelectedValue.ToString());
	}


	public void GetSearchResults()
	{
		// Get SearchParams Class from query string
		SearchParamsVendor sp = SearchVendors.GetQueryStringValues(HttpContext.Current.Request);

		// Update Pager Results
		GetResultsCount(sp);

		// Fill DataTable from Search Results
		DataTable dt = SearchVendors.GetVendors(sp, PageIndex, PageSize, SortExpression, SortDirection);

		// Load repeater with data
		rptVendors.DataSource = dt;
		rptVendors.DataBind();
	}
	public void GetResultsCount(SearchParamsVendor sp)
	{
		// Get total rows
		int totalRows = SearchVendors.GetVendorsCount(sp);

		// Update PageCount for pager, using adjustment if necessary
		int addPage = 1;
		if ((totalRows % PageSize) == 0)
		{
			addPage = 0;
		}
		PageCount = (totalRows / PageSize) + addPage;

		// Disable buttons if necessary
		ibtnFirstPageTop.Enabled = !(PageIndex == 0);
		ibtnPrevPageTop.Enabled = !(PageIndex == 0);
		ibtnNextPageTop.Enabled = !(PageIndex >= PageCount - 1);
		ibtnLastPageTop.Enabled = !(PageIndex >= PageCount - 1);

		// Calculate Results & Update Pager
		int startResults = (PageIndex * PageSize) + 1;
		int endResults = (PageIndex * PageSize) + PageSize;

		if (endResults > totalRows)
		{
			endResults = totalRows;
		}
		lblCurrentPage.Text = "Results: " + startResults.ToString() + " - " + endResults.ToString() + " of " + totalRows.ToString();
	}


	//Pager Constants
	public int PageIndex
	{
		get
		{
			object o = ViewState["_PageIndex"];
			if (o == null)
				return 0; // default page index of 0
			else
				return (int)o;
		}
		set
		{
			ViewState["_PageIndex"] = value;
		}
	}
	public int PageSize
	{
		get
		{
			object o = ViewState["_PageSize"];
			if (o == null)
				return 10; // default 10 rows
			else
				return (int)o;
		}
		set
		{
			ViewState["_PageSize"] = value;
		}
	}
	public int PageCount
	{
		get
		{
			object o = ViewState["_PageCount"];
			if (o == null)
				return 0; // default no pages found
			else
				return (int)o;
		}
		set
		{
			ViewState["_PageCount"] = value;
		}
	}

	// Pager Controls
	protected void FirstPage_Click(object sender, EventArgs e)
	{
		// Send the user to the first page 
		PageIndex = 0;
		GetSearchResults();
	}
	protected void PrevPage_Click(object sender, EventArgs e)
	{
		// Send the user to the previous page 
		PageIndex -= 1;
		GetSearchResults();
	}
	protected void NextPage_Click(object sender, EventArgs e)
	{
		// Send the user to the next page 
		PageIndex += 1;
		GetSearchResults();
	}
	protected void LastPage_Click(object sender, EventArgs e)
	{
		// Send the user to the last page 
		PageIndex = PageCount - 1;
		GetSearchResults();
	}

	// Sorting Constants
	public string SortExpression
	{
		get
		{
			object o = ViewState["_SortExpression"];
			if (o == null)
				return DEFAULTCOL; // default sort by Relevance Score
			else
				return (string)o;
		}
		set { ViewState["_SortExpression"] = value; }
	}
	public string SortDirection
	{
		get
		{
			object o = ViewState["_SortDirection"];
			if (o == null)
				return DESCENDING;
			else
				return (string)o;
		}
		set { ViewState["_SortDirection"] = value; }
	}
	private const string DEFAULTCOL = "VendorNo";
	private const string ASCENDING = "ASC";
	private const string DESCENDING = "DESC";
	private const string IMGDESC = "~/img/downarrow.gif";
	private const string IMGASC = "~/img/uparrow.gif";
	private const string IMGNOSORT = "~/img/placeholder.gif";


	// Sorting Controls

	public void clearImages()
	{
		imgSortVendorName.ImageUrl = IMGNOSORT;
		imgSortVendorNo.ImageUrl = IMGNOSORT;

	}
	public void sortVendorName(object sender, EventArgs e)
	{
		clearImages();

		if (SortExpression == "VendorName")
		{
			if (SortDirection == ASCENDING)
			{
				SortDirection = DESCENDING;
				imgSortVendorName.ImageUrl = IMGDESC;
			}
			else
			{
				SortDirection = ASCENDING;
				imgSortVendorName.ImageUrl = IMGASC;
			}
		}
		else
		{
			SortExpression = "VendorName";
			SortDirection = ASCENDING;
			imgSortVendorName.ImageUrl = IMGASC;
		}

		GetSearchResults();
	}
	public void sortVendorNo(object sender, EventArgs e)
	{
		clearImages();

		if (SortExpression == "VendorNo")
		{
			if (SortDirection == ASCENDING)
			{
				SortDirection = DESCENDING;
				imgSortVendorNo.ImageUrl = IMGDESC;
			}
			else
			{
				SortDirection = ASCENDING;
				imgSortVendorNo.ImageUrl = IMGASC;
			}
		}
		else
		{
			SortExpression = "VendorNo";
			SortDirection = ASCENDING;
			imgSortVendorNo.ImageUrl = IMGASC;
		}

		GetSearchResults();
	}


}
